		.text
		j	main			# Jump to main-routine

		.data
str1:		.asciiz "Insert the array size \n"
str2:		.asciiz "Insert the array elements,one per line  \n"
str3:		.asciiz "The sorted array is : \n"
str5:		.asciiz "\n"

		.text
		.globl	main
main: 
		la	$a0, str1		# Print of str1
		li	$v0, 4			#
		syscall				#

		li	$v0, 5			# Get the array size(n) and
		syscall				# and put it in $v0
		move	$a1, $v0		# $s2=n
		sll	$s0, $v0, 2		# $s0=n*4
		sub	$sp, $sp, $s0		# This instruction creates a stack
						# frame large enough to contain
						# the array
		la	$a0, str2		#
		li	$v0, 4			# Print of str2
		syscall				#
            
		move	$s1, $zero		# i=0
for_get:	bge	$s1, $a1, exit_get	# if i>=n go to exit_for_get
		sll	$t0, $s1, 2		# $t0=i*4
		add	$t1, $t0, $sp		# $t1=$sp+i*4
		li	$v0, 5			# Get one element of the array
		syscall				#
		sw	$v0, 0($t1)		# The element is stored
						# at the address $t1
		la	$a0, str5
		li	$v0, 4
		syscall
		addi	$s1, $s1, 1		# i=i+1
		j	for_get
exit_get:	move	$a0, $sp		# $a0=base address af the array
		addi $a1, $a1, -1
		jal	sort_loop			
						# In this moment the array has been 
						# sorted and is in the stack frame 
						
exit_get2:
		la	$a0, str3		# Print of str3
		li	$v0, 4
		addi $a1, $a1, 1
		syscall

		move	$s1, $zero		# i=0
		
for_print:  bge $s1, $a1, exit_print  # if i>=n go to exit_print
            sll $t0, $s1, 2           # $t0=i*4
            add $t1, $sp, $t0         # $t1=address of a[i]
            lw  $a0, 0($t1)           # <-- Here is the mistake
            li  $v0, 1                # print of the element a[i]
            syscall

            la  $a0, str5
            li  $v0, 4
            syscall
            addi $s1, $s1, 1          # i=i+1
            j   for_print

exit_print:	add	$sp, $sp, $s0		# elimination of the stack frame 
              
		li	$v0, 10			# EXIT
		syscall				#

sort_loop:
    blt $a1, $t9, exit_get2       # If all elements have been inserted, exit loop
    sll $t8, $t9, 2              # Convert current index to byte offset
    add $t8, $a0, $t8            # Address of current element to insert
    lw $a2, 0($t8)               # Load current element to $a2
    li $t1, -1                   # Initialize low = -1 for binary search
    move $t2, $t9                # Initialize high = current index for binary search

    jal binary_search            # Perform binary search
    move $a3, $v0                # Move the result (insertion index) to $a3

    jal insert                   # Perform insertion

    addi $t9, $t9, 1             # Move to the next element
    j sort_loop


insert:
    addi $t0, $t9, -1            # j = length - 1
    sll $a3, $a3, 2              # i = i * 4 (to convert array index to byte offset)
    sll $t0, $t0, 2              # j = j * 4 (to convert array index to byte offset)

loop_start:
    blt $t0, $a3, insert_end     # if j < i, exit loop
    add $t1, $t0, $a0            # address of a[j]
    lw $t2, 0($t1)               # t2 = a[j]
    addi $t1, $t1, 4             # address of a[j+1]
    sw $t2, 0($t1)               # a[j+1] = t2
    addi $t0, $t0, -4            # j = j - 1 (in byte offsets, hence -4)
    j loop_start                 # repeat loop

insert_end:
    add $t1, $a0, $a3            # address of a[i]
    sw $a2, 0($t1)               # a[i] = elem
    jr $ra                       # return to caller

binary_search:
    # Initialize
    li $t1, 0  
    move $t2, $t2                # High

binary_search_loop:
    move $t4, $t1
    sub $t5, $t2, $t4            # $t5 = high - low
    blez $t5, binary_search_end  # Exit loop if high <= low

    add $t6, $t1, $t2            # $t6 = low + high
    sra $t6, $t6, 1              # $t6 = (low + high) / 2
    sll $t7, $t6, 2              # Convert index to byte offset
    add $t7, $t7, $a0            # Get address of array[mid]
    lw $t8, 0($t7)               # Load array[mid]

    bge $t8, $a2, update_high    # If array[mid] >= elem
    addi $t1, $t6, 1             # Update low
    j binary_search_loop

update_high:
    move $t2, $t6                # Update high
    j binary_search_loop

binary_search_end:
    move $v0, $t2                # Return high as insertion index
    jr $ra                       # Return to main
