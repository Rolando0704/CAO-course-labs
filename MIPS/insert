
    .data
array:  .word 10, 20, 30, 40, 50  # Initial array
    .text
    .globl main

main:
    la $a0, array     # Load base address of the array into $a0
    li $a1, 5         # Load length of the array into $a1 (5 elements)
    li $a2, 25        # Load element to insert into $a2 (25)
    li $a3, 2         # Load insertion index into $a3 (index 2)

    jal insert        # Jump and link to insert function

    # Insert function would go here (the assembly code from the previous explanation)

    # Exit program (Assuming usage of SPIM or MARS simulator)
    li $v0, 10        # Load exit syscall code into $v0
    syscall           # Make syscall to exit program

insert:
    addi $t0, $a1, -1        # j = length - 1
    sll $a3, $a3, 2          # i = i * 4 (to convert array index to byte offset)
    sll $t0, $t0, 2          # j = j * 4 (to convert array index to byte offset)

loop_start:
    blt $t0, $a3, insert_end # if j < i, exit loop
    add $t1, $t0, $a0        # address of a[j]
    lw $t2, 0($t1)           # t2 = a[j]
    addi $t1, $t1, 4         # address of a[j+1]
    sw $t2, 0($t1)           # a[j+1] = t2
    addi $t0, $t0, -4        # j = j - 1 (in byte offsets, hence -4)
    j loop_start             # repeat loop

insert_end:
    add $t1, $a0, $a3        # address of a[i]
    sw $a2, 0($t1)           # a[i] = elem
    jr $ra                   # return to caller
