.data
array: .word 1, 3, 5, 7, 9   # The sorted array
elem: .word 6                # Element to insert

.text
.globl main

main:
    la $t0, array            # Load base address of array into $t0
    li $t1, -1               # Initialize low = -1, stored in $t1
    li $t2, 5                # Initialize high = length of array (5), stored in $t2
    lw $t3, elem             # Load element to insert into $t3
    
binary_search:
    # Check if low < high - 1
    addi $t4, $t1, 1         # $t4 = low + 1
    sub $t5, $t2, $t4        # $t5 = high - (low + 1)
    blez $t5, end_search     # If high - (low + 1) <= 0, exit loop

    # Calculate mid = (low + high) / 2
    add $t6, $t1, $t2        # $t6 = low + high
    sra $t6, $t6, 1          # $t6 = (low + high) / 2, shift right arithmetic for division by 2
    move $t7, $t6            # Copy mid to $t7 for array indexing

    # Calculate address of array[mid] and load its value into $t8
    sll $t7, $t7, 2          # Multiply mid by 4 to get byte offset (word addressing)
    add $t7, $t7, $t0        # Calculate address of array[mid]
    lw $t8, 0($t7)           # Load array[mid] into $t8

    # Compare array[mid] with elem and update low/high
    bge $t8, $t3, update_high    # If array[mid] >= elem, go to update_high
    addi $t1, $t6, 1         # Else, update low = mid + 1
    j binary_search

update_high:
    move $t2, $t6            # Update high = mid
    j binary_search

end_search:
    # At this point, $t2 (high) is the correct insertion index
    # Further code to handle the insertion or result can be added here

    # Placeholder for end of program or further processing
    # Assuming exit via syscall for demonstration purposes
    li $v0, 10               # Load the exit syscall code into $v0
    syscall                  # Make the syscall, terminating the program
